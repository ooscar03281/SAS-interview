# 匯入條件 --------------------------------------------------------------------
model_class_select <- switch(model_type,"法金模型_Hybrid_I" = "1" ,"法金模型_Hybrid_II" = "2" ,"法金模型_Hybrid_III" = "3")
getwd()
File_path <-paste0(getwd(),"/")
code_path<-paste0(File_path,"009_程式碼/") 
yyyymm_version = 20200422
Season_select <- "Q4"
model_year <- '2019'
Season <- "Q4"
#setwd('D:/法金模型 - Hybrid II/法金模型Q2-Q4/') 
#output_path <- paste0(getwd(),"/005_俊諺")


# 載入自建函數 ------------------------------------------------------------------

source(paste0(code_path,"900_載入R的package.R"),encoding = "utf-8")
source(paste0(code_path,"999_載入建置函數.R"),encoding = "utf-8")
source(paste0(code_path,"B000_法金模型函數.R"),encoding = "utf-8")


# 載入Q4 EXCEL --------------------------------------------------------------
Data_fin <- read_excel(Datafilepath)

#Data_Fin <- load_data(DataNAme="000_Data/法金模型_2019Q4.xlsx") #自建函式
Data_fin <- read_excel(path="D:/法金模型 - Hybrid II/法金模型Q2-Q4/000_Data/法金模型_2019Q4.xlsx" )
data_fin_hybrid2 <- Data_Fin %>% filter(HybridModel == "2")
varlist <- c("CP0004","CP0006","CP0013","CP0020","CP0025","CP0026","CP0027","CP0037","CP0039","FR0001","FR0010",'FR0014',"FR0024","FR0036","FR0053","FR0063","FR0072","FR0082","NF0018","NF0019","NF0027","NF0049","NF0051","NF0083","NF0140")

model_type="法金模型_Hybrid_II"
model_year = '2019'
season = "Q4"
class_type = "法金"
ModelDatapath='/database/View_Database.mdb'
channel_path='/database/View_Database.mdb'
Datafilepath = "D:/法金模型 - Hybrid II/法金模型Q2-Q4/000_Data/法金模型_2019Q4.xlsx"
# hybrid2_Q4<- View_Corporation_ITOIII("000_Data/法金模型_2019Q4.xlsx",class_type,model_type,model_year,Season_select,ModelDatapath,channel_path)

Data_row_01<-readxl::read_excel(path=Datafilepath,sheet="RAWDATA")
Data_row_01<-as.data.frame(Data_row_01)

Data_defaultRank_01<-readxl::read_excel(path=Datafilepath,sheet="預設評等名單")
Data_defaultRank_01<-as.data.frame(Data_defaultRank_01)


Data_reject_01<-readxl::read_excel(path=Datafilepath,sheet="拒往")
Data_reject_01<-as.data.frame(Data_reject_01)

Data_overdue_01<-readxl::read_excel(path=Datafilepath,sheet="客戶逾期日")
Data_overdue_01<-as.data.frame(Data_overdue_01)

Data_Bailout_01<-readxl::read_excel(path=Datafilepath,sheet="紓困客戶註記")
Data_Bailout_01<-as.data.frame(Data_Bailout_01)

Data_Bailout_case<-readxl::read_excel(path=Datafilepath,sheet="紓困案名單")
Data_Bailout_case<-as.data.frame(Data_Bailout_case)

Data_row_PSI<-readxl::read_excel(path=Datafilepath,sheet="PSIRowData")
Data_row_PSI<-as.data.frame(Data_row_PSI)

Data_row_PSI_delete<-readxl::read_excel(path=Datafilepath,sheet="PSI_移除名單")
Data_row_PSI_delete<-as.data.frame(Data_row_PSI_delete)  


# ------------------------------------------------------------------------

#             拒往名單、紓困名單整理



# -------------------------------------------------------------------------
#Data_reject<-sqldf("select ID, min(reject_Data) as reject_Data_early from Data_reject_01 where reject_Data is not null group by ID")



# 資料清理
## 拒往日期
colnames(Data_reject_01)[which(colnames(Data_reject_01)=="拒往日期")] <- "reject_Date"
# as.Date(as.data.frame(Data_reject_01[1,"reject_Data"]))
Data_reject_01[,"reject_Date"]<-format(Data_reject_01[,"reject_Date"], "%Y%m%d")
#Data_reject_01[,"reject_Data"]<-format(as.data.frame(Data_reject_01[,"reject_Data"]), "%Y%m%d")
Data_reject_01[,"reject_Date"]<-as.numeric(Data_reject_01[,"reject_Date"])
Data_reject <- sqldf('select ID , min(reject_Date) as reject_Data_early from Data_reject_01 where reject_Date  group by ID')


## 客戶逾期日
colnames(Data_overdue_01)[which(colnames(Data_overdue_01)=="統編")]<-"ID"
Data_overdue_01[,"overdue_day"]<-as.numeric(format(Data_overdue_01[,"實際逾期日"], "%Y%m%d"))
Data_overdue<-sqldf("select ID, min(overdue_day) as overdue_day from Data_overdue_01 where overdue_day is not null group by ID")

## 紓困客戶註記
colnames(Data_Bailout_01)[which(colnames(Data_Bailout_01) == '紓困客戶註記')] <- "Bailout_flag"
  #Data_Bailout_01[,"Bailout_flag"]<- Data_Bailout_01[,'紓困客戶註記']
Data_Bailout <- Data_Bailout_01

#名稱調整
colnames(Data_row_01)[which(colnames(Data_row_01)=="核准日期")]<-"approve_DT"
colnames(Data_row_01)[which(colnames(Data_row_01)=="模型種類")]<-"model_class"
colnames(Data_row_01)[which(colnames(Data_row_01)=="模型評等")]<-"model_rating"
colnames(Data_row_01)[which(colnames(Data_row_01)=="評分")]<-"score"
colnames(Data_row_01)[which(colnames(Data_row_01)=="評分日期")]<-"score_DT"
colnames(Data_row_01)[which(colnames(Data_row_01)=="AHP評等")]<-"AHP_rating"
colnames(Data_row_01)[which(colnames(Data_row_01)=="最終評等")]<-"fin_rating"
colnames(Data_row_01)[which(colnames(Data_row_01)=="金控評等")]<-"group_rating"
colnames(Data_row_01)[which(colnames(Data_row_01)=="App ID")]<-"App_ID"
Data_row_01[,"model_class"]<-as.character(Data_row_01[,"model_class"])


colnames(Data_defaultRank_01)[which(colnames(Data_defaultRank_01)=="核准日期")]<-"approve_DT"
colnames(Data_defaultRank_01)[which(colnames(Data_defaultRank_01)=="模型種類")]<-"model_class"
colnames(Data_defaultRank_01)[which(colnames(Data_defaultRank_01)=="模型評等")]<-"model_rating"

colnames(Data_defaultRank_01)[which(colnames(Data_defaultRank_01)=="App ID")]<-"App_ID"


# -------------------------------------------------------------------------



#             進行排除條件設定


# -------------------------------------------------------------------------
# 排除條件設定 如果flag為1的就是需要排除掉的條件(例如flag1中排除掉開頭為英文的(OBU客戶))
#Data_row_01[,"Delete_flag"]<-ifelse(rowSums(Data_row_01[,c("flag1","flag2","flag3","flag4","flag5","flag6","flag7","flag8")])>0,"N","Y")

Data_row_01[,"flag1"]<-ifelse(substr(Data_row_01[,"ID"],1,1) %in% c("1","2","3","4","5","6","7","8","9","0"),0,1)
Data_row_01[,"flag2"]<-sqldf("select case when score is null or score ='NULL' then 1 else 0 end as flag2  from Data_row_01")
Data_row_01[,"flag3"]<-sqldf("select case when model_rating in ('FI','BK','CG','LG') then 1 else 0 end as flag3  from Data_row_01")
Data_row_01[,"flag4"]<-sqldf("select case when fin_rating in ('D') then 1 else 0 end as flag4  from Data_row_01")
start_month<-format(ymd(paste0((as.numeric(model_year)),"-",switch(season, "Q1" = "03", "Q2" = "06", "Q3" = "09", "Q4" = "12"),"-01"))+months(1)-months(24), "%Y%m%d")
Data_row_01[,"flag5"]<-sqldf(paste0("select case when approve_DT < ", start_month ," then 1 else 0 end as flag5  from Data_row_01"))
Data_row_01[,"flag6"]<-sqldf(paste0("select case when b.ID is not null then 1 else 0 end as flag5  from Data_row_01 a left join Data_Bailout_case b on a.ID = b.ID "))

Data_row_01[,"flag7"]<-sqldf(paste0("select case when a.approve_DT > b.reject_Data_early then 1 else 0 end as flag7 from Data_row_01 a left join Data_reject b on a.ID = b.ID"))

Data_row_01[,"flag8"]<-sqldf(paste0("select case when a.ID = b.ID and  a.App_ID=b.App_ID then 1 else 0 end as flag8 from Data_row_01 a left join Data_defaultRank_01 b on a.ID = b.ID and  a.App_ID=b.App_ID "))

Data_row_01[,'delete.flag'] <- ifelse(rowSums(Data_row_01[,c('flag1','flag2','flag3','flag4','flag5','flag6','flag7','flag8')]) >0,"N","Y")

# 違約判斷

default_flag<-sqldf("select a.ID,
                        case when b.reject_Data_early is not null then 1 else 0 end as df_flag1, 
                        case when c.overdue_day is not null then 1 else 0 end as df_flag2,
                        case when d.Bailout_flag is not null then 1 else 0 end as df_flag3
                        from Data_row_01 a
                        
                        left join Data_reject b on a.ID=b.ID
                        left join Data_overdue c on a.ID=c.ID
                        left join Data_Bailout d on a.ID=d.ID
                        
                        
                        ")

default_flag[,"DF"]<-ifelse(rowSums(default_flag[,c("df_flag1","df_flag2","df_flag3")])>0,1,0)

default_flag<-sqldf("select distinct * from default_flag")
# 

Data_row_<-sqldf("Select a.*,b.DF from Data_row_01 a left join default_flag b on a.ID=b.ID")


Data_row<-sqldf("select * from Data_row_ where Delete_flag='Y'")
score_<-as.numeric(Data_row[,"score"])

Data_row[,"score_"]<-max(score_)-score_
Data_row[,"Y_"]<-Data_row[,"DF"]
Data_row[,"Rating_"]<-Data_row[,"model_rating"]

data_row_hybrid2 <- Data_row %>% filter(HybridModel == "2")

# if(is.null(model_list)){
#   model_type<-model_flag
# }else{
#   
#   model_type_list<-paste0(model_flag,"_",model_list)
# } 


# PSI 資料清理

#名稱調整
Data_row_PSI<-as.data.frame(Data_row_PSI)
Data_row_PSI_delete<-as.data.frame(Data_row_PSI_delete)
colnames(Data_row_PSI_delete)[which(colnames(Data_row_PSI_delete)=="App ID")]<-"App_ID"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="App ID")]<-"App_ID"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="核准日期")]<-"approve_DT"
Data_row_PSI[,"approve_DT"]<-as.numeric(ifelse(Data_row_PSI[,"approve_DT"]=="NULL",NA,Data_row_PSI[,"approve_DT"]))

colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="模型種類")]<-"model_class"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="模型評等")]<-"model_rating"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="評分")]<-"score"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="評分日期")]<-"score_DT"

Data_row_PSI[,"score_DT"]<-as.numeric(gsub("/","",Data_row_PSI[,"score_DT"]))
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="AHP評等")]<-"AHP_rating"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="最終評等")]<-"fin_rating"
colnames(Data_row_PSI)[which(colnames(Data_row_PSI)=="金控評等")]<-"group_rating"

Data_row_PSI[,"model_class"]<-as.character(Data_row_PSI[,"model_class"])
calibration_DT = '20161001'
# 排除條件設定
Data_row_PSI[,"flag1"]<-ifelse(substr(Data_row_PSI[,"ID"],1,1) %in% c("1","2","3","4","5","6","7","8","9","0"),0,1)
Data_row_PSI[,"flag2"]<-sqldf("select case when score is null or score ='NULL' or model_rating is null or model_rating = 'NULL' or model_rating = '-' then 1 else 0 end as flag2  from Data_row_PSI")
Data_row_PSI[,"flag3"]<-sqldf("select case when model_rating in ('FI','BK','CG','LG') then 1 else 0 end as flag3  from Data_row_PSI")
Data_row_PSI[,"Rating_"]<-as.numeric(Data_row_PSI[,"model_rating"])
Data_row_PSI[,"flag4"]<-sqldf(paste0("select case when score_DT < ", calibration_DT ," then 1 else 0 end as flag4  from Data_row_PSI"))
Data_row_PSI[,"flag5"]<-sqldf(paste0("select case when b.ID is not null then 1 else 0 end as flag5  from Data_row_PSI a left join Data_row_PSI_delete b on a.ID = b.ID  and a.App_ID=b.App_ID"))
Data_row_PSI[,"Delete_flag"]<-ifelse(rowSums(Data_row_PSI[,c("flag1","flag2","flag3","flag4","flag5")])>0,"N","Y")
#Data_row_PSI[,"Delete_flag"]<-ifelse(rowSums(Data_row_PSI[,c("flag1","flag2")])>0,"N","Y")

Data_row_PSI<-sqldf("select * from Data_row_PSI where Delete_flag='Y'")

data_verify_miss<-sqldf(paste0("select * from Data_row where model_class ='",model_class_select,"'"))
modelrowdata_PSI<-sqldf(paste0("select * from Data_row_PSI where model_class ='",model_class_select,"'"))


result<-list(data_verify_miss=data_verify_miss,modelrowdata_PSI=modelrowdata_PSI)

cat("完成監控資料載入.....",'\n')




# 載入監控資料
ViewData<-load_clear_ViewData(Datafilepath=Datafilepath,model_type=model_type,model_year=model_year,season=Season_select)

cat("完成資料清理.....",'\n')

# 載入模型因子清單及資料調整  - 函數
load_adjusr_ModelVarData<-function(model_type,data_verify_miss,ModelDatapath=ModelDatapath){
  
  
  # Sql code 查詢函數
  sqlcode_queny <- function(sqlcode,channel_path){
    
    channel <- odbcConnectAccess(channel_path)
    
    DataQuery<-sqlQuery(channel,sqlcode)
    
    odbcClose(channel)
    
    return(DataQuery)
  }
  
  
  
  # 載入資料正確性之參數表
  var_parameter_miss_code<-paste0("select class, var_code,var_name,model ,trim(miss_desc) as miss_desc1 ,data_type  from var_parameter_miss_table where model = '",model_type,"' ")
  
  var_parameter_miss<-sqlcode_queny(sqlcode=var_parameter_miss_code,channel_path=paste0(getwd(),ModelDatapath))
  colnames(var_parameter_miss)[which(colnames(var_parameter_miss)=="miss_desc1")]<-'miss_desc'
  
  # 載入資料完整性之參數表
  var_parameter_code<-paste0("select class, var_code,var_name,model ,trim(miss_desc) as miss_desc1  from var_parameter_table where model = '",model_type,"' ")
  var_parameter<-sqlcode_queny(sqlcode=var_parameter_code,channel_path=paste0(getwd(),ModelDatapath))
  colnames(var_parameter)[which(colnames(var_parameter)=="miss_desc1")]<-'miss_desc'
  
  
  # 載入模型建置樣本
  model_build_data_code<-paste0("select * from model_build_all where model  in ('",model_type,"')")
  model_build_data<-sqlcode_queny(sqlcode=model_build_data_code,channel_path=paste0(getwd(),ModelDatapath))
  
  # 載入模型PSI
  model_build_data_PSI_code<-paste0("select * from model_build_all_PSI where  model  in ('",model_type,"')")
  model_build_data_PSI<-sqlcode_queny(sqlcode=model_build_data_PSI_code,channel_path=paste0(getwd(),ModelDatapath))
  
  tran_list_num<-var_parameter_miss[var_parameter_miss[,"data_type"]=="numeric","var_code"]
  
  if(length(tran_list_num)!=1){
    for(i in 1:length(tran_list_num)){
      
      item <-  as.character(tran_list_num[i])
      
      data_verify_miss[,item]<-as.numeric(sqldf(paste0("select ",item," from data_verify_miss"))[,1])
      
    }
  }
  
  for( item in 1:length(data_verify_miss)){
    
    if(substr(colnames(data_verify_miss)[item],1,2)=="CP"){
      
      data_verify_miss[which(is.na(data_verify_miss[,colnames(data_verify_miss)[item]])),colnames(data_verify_miss)[item]] = -99981
      
    }
    
    if(colnames(data_verify_miss)[item]=="NF0083"){
      
      data_verify_miss[which(is.na(data_verify_miss[,colnames(data_verify_miss)[item]])),colnames(data_verify_miss)[item]] = -99981
      
    }
    
    
  }
  
  
  result<-list(var_parameter_miss=var_parameter_miss,var_parameter=var_parameter,model_build_data=model_build_data,model_build_data_PSI=model_build_data_PSI,data_verify_miss=data_verify_miss)
  
  return(result)
}


# 載入模型因子清單及資料調整
ModelVarData<-load_adjusr_ModelVarData(model_type=model_type,data_verify_miss=ViewData$data_verify_miss,ModelDatapath=ModelDatapath)

message_list<-c(message_list,"完成模型相關資料載入....")






# -------------------------------------------------------------------------


##################################
#                                #
# 200_資料完整性                 #
#                                #               
##################################



# 資料正確性分析
model_yymm="201912"
Data_desc_summary00<-var_stat_conti(datafile = ModelVarData$data_verify_miss,var_parameter = ModelVarData$var_parameter_miss,sort_col="var_name",class_index=class_type,model_index=model_type,yymm_index=model_yymm)

Data_desc_summary<-Data_desc_summary00$var_desc

cat("完成資料正確性.....",'\n')
# cat(print("完成資料正確性....."))

message_list<-c(message_list,"完成資料正確性.....")
#write.xlsx(Data_desc_summary,paste0(getwd(),"/005_俊諺/資料完整性、正確性",yyyymm_version,".xlsx"),sheetName="資料正確性",row.names=FALSE, append=TRUE)





## 資料完整性分析
Data_miss_summary<-Data_miss(datafile=ModelVarData$data_verify_miss,var_parameter=ModelVarData$var_parameter,sort_col="var_name",class_index=class_type,model_index=model_type,yymm_index=model_yymm)




## 縱向檢視
Data_colmiss<-Data_miss_summary$colmiss

## 橫向檢視
Data_rowmiss<-Data_miss_summary$rowmiss

message_list<-c(message_list,"完成資料完整性.....")
# cat(print("完成資料完整性....."))
cat("完成資料完整性.....",'\n')

#write.xlsx(Data_colmiss,paste0(getwd(),"/005_俊諺/資料完整性、正確性",yyyymm_version,".xlsx"),sheetName="資料完整性",row.names=FALSE, append=TRUE)
#write.xlsx(Data_rowmiss,paste0(getwd(),"/005_俊諺/資料完整性、正確性",yyyymm_version,".xlsx"),sheetName="資料完整性2",row.names=FALSE, append=TRUE)






# 驗算橫向檢視 ------------------------------------------------------------------
var_parameteryan<- ModelVarData$var_parameter
write.xlsx(var_parameteryan,paste0(getwd(),"/005_俊諺/參數缺漏植判斷",yyyymm_version,".xlsx"),sheetName="資料完整性",row.names=FALSE, append=TRUE)
data_verify_missyan <- ViewData$data_verify_miss #主檔案

missdec_yan1<-readxl::read_excel(path="D:/法金模型 - Hybrid II/法金模型Q2-Q4/005_俊諺/參數缺漏判斷20200427.xlsx",sheet="資料完整性")




# 模型效度驗證 ------------------------------------------------------------------
  #1.AUC&GINI&KS 2.好壞比 3.binomial 4.PSI
data_verify_missyan <- ViewData$data_verify_miss #主檔案

##################################
#                                #
# 501_AUC                        #
#                                #               
##################################

# 1.

data_verify_missyan[,"score_1"]<-min(data_verify_missyan[,"score_"])-data_verify_missyan[,"score_"]
y_pred=(max(data_verify_missyan$score_1)-data_verify_missyan$score_1)
y_real=data_verify_missyan$Y_
data_verify_AUC1 <- AUC(y_pred,y_real)


# 2.

data_verify_AUC2 <- AUC(data_verify_missyan$score_,data_verify_missyan$Y_)
data_verify_GINI <- data_verify_AUC*2-1

# 3.

data_verify_missyan[,"score_1"]<-min(data_verify_missyan[,"score_"])-data_verify_missyan[,"score_"]
output_path <- paste0(getwd(),"/005_俊諺")
data_verify_AUC3<-get_AUC(y_pred=(max(data_verify_missyan$score_1)-data_verify_missyan$score_1),y_real=data_verify_missyan$Y_,output_path=output_path)


#PLOT 
plot.roc(as.numeric(data_verify_missyan$Y_),data_verify_missyan$score_, print.auc=TRUE, auc.polygon=TRUE, partial.auc.focus="blue", max.auc.polygon=TRUE, auc.polygon.col=rgb(153,204,255,maxColorValue = 255),  reuse.auc=FALSE)


##################################
#                                #
# 502_KS                         #
#                                #               
##################################

data_verify_KS<- KS_Stat(max(data_verify_missyan$score_)-data_verify_missyan$score_,data_verify_missyan$Y_)

data_verify_KS<- KS_Stat(data_verify_missyan$score_,data_verify_missyan$Y_)/100
